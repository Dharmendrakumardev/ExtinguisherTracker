Project Documentation: Fire Extinguisher Maintenance Tracker
This document provides a comprehensive overview of the Fire Extinguisher Maintenance Tracker mobile application.

1. Overview
The Fire Extinguisher Maintenance Tracker is a React Native mobile application designed to streamline the management and maintenance of fire extinguishers. It provides functionalities for barcode generation, static information entry for each extinguisher, and dynamic logging of maintenance activities. The application aims to offer a user-friendly interface for tracking fire extinguisher lifecycles, ensuring compliance and safety.

2. Core Functionalities
The application is built around three primary functional areas:

2.1 Barcode Management (on HomeScreen)
This is the entry point of the application, allowing users to interact with fire extinguisher records via barcodes.

Barcode Generation (Single):
Input: Accepts a unique identifier (text) from the user.
Output: Generates a QR Code based on the input.
Action: Once generated, the user can proceed to enter static information for this new extinguisher or share the barcode.
Batch Barcode Generation:
Input: Allows users to specify a prefix (e.g., "FE-") and the number of barcodes (up to 200) to generate simultaneously.
Output: Generates a series of QR Codes with sequential numbering (e.g., FE-001, FE-002, ...).
Action: Displays all generated barcodes in a scrollable modal. Users can select any individual barcode from the batch to proceed with information entry or share it.
Barcode Scanning:
Input: Utilizes a simulated barcode scanner (in a real-world scenario, this would integrate with the device's camera using expo-barcode-scanner). Users can input a barcode string to simulate a scan.
Logic:
If the scanned barcode exists in the local storage, the app navigates directly to the MaintenanceLogScreen for that extinguisher, allowing for immediate logging or viewing of past records.
If the scanned barcode does not exist, the app navigates to the StaticInfoScreen to prompt the user to enter the initial static details for this new extinguisher.
User Feedback: Provides loading indicators and appropriate messages during the scanning and data retrieval process.
Barcode Sharing:
Available for both single and batch-generated barcodes.
Options: Users can share the barcode string via:
Email: Opens the device's default email client with a pre-filled subject and body containing the barcode value.
WhatsApp: Opens WhatsApp with a pre-composed message including the barcode value.
Other Apps: Utilizes the native device sharing API, allowing the user to select from a variety of installed applications (e.g., messaging apps, cloud storage, notes).
Purpose: Facilitates printing of barcodes to be physically attached to fire extinguishers.
2.2 Static Information Entry (on StaticInfoScreen)
This screen is dedicated to capturing the initial, one-time details of a fire extinguisher. It is accessed when a new barcode is generated or scanned.

Data Fields:
Fire Extinguisher No: Text input (required).
Location: Text input (required).
Date of Testing: Date picker component, allowing users to select a specific date (required).
Data Storage: Once submitted, these details are stored locally using AsyncStorage and associated with the unique barcode.
Validation: Basic input validation is in place to ensure all required fields are filled before saving.
Navigation: Upon successful submission, the user is navigated to the MaintenanceLogScreen for the newly registered extinguisher.
2.3 Dynamic Maintenance Log (on MaintenanceLogScreen)
This screen allows for ongoing tracking and logging of maintenance activities for a specific fire extinguisher. It is accessible after static information has been entered or when an existing extinguisher's barcode is scanned.

Extinguisher Details Display: Shows the static information (Fire Extinguisher No, Location, Date of Testing) for the currently selected extinguisher.
Maintenance Entry Fields:
Date Work Done: Date picker component (required).
Remarks: Multiline text input for detailed notes about the maintenance (required).
User: Text input for the name of the person who performed the maintenance (required).
Adding Entries: Users can add multiple maintenance entries for the same fire extinguisher.
Viewing Logs: Displays a chronological list of all maintenance entries for the selected extinguisher, with the newest entries appearing first.
Data Storage: All maintenance entries are stored locally via AsyncStorage and are linked to the specific fire extinguisher's barcode.
Validation: Basic input validation ensures all required fields for a maintenance entry are completed.
3. Technical Architecture and Libraries Used
The application is built using React Native with functional components and hooks, following modern best practices.

3.1 Core React Native & Expo Modules
react: The fundamental JavaScript library for building user interfaces.
react-native: The framework for building native mobile applications using React.
expo: A framework and platform for universal React applications. It simplifies development by providing pre-built APIs and tools.
expo-linking: Used for deep linking functionality, specifically for opening external apps like email and WhatsApp.
3.2 Navigation
@react-navigation/native: The primary library for handling navigation in React Native applications.
@react-navigation/native-stack: Provides a native-feeling stack navigator, allowing for screen transitions that mimic native app behavior.
Stack.Navigator: Manages the navigation stack, defining the order and behavior of screens.
Stack.Screen: Defines individual screens within the navigator, including their names, components, and specific options (e.g., header titles).
useNavigation hook: Provides access to the navigation object within components for programmatic navigation (e.g., navigation.navigate()).
3.3 UI Components & Styling
react-native-safe-area-context: Ensures content is rendered within the safe area boundaries of a device, avoiding notches, status bars, and home indicators.
SafeAreaProvider: Wraps the entire application to provide safe area insets to child components.
sonner-native: A library for displaying toasts (brief, temporary messages) to the user for feedback (e.g., "Barcode copied!", "Extinguisher saved!").
Toaster component: Placed at the root of the app to render toasts globally.
react-native-qrcode-svg: Used for generating QR codes directly within the application.
react-native-modal-datetime-picker: A cross-platform date and time picker component, used for selecting "Date of Testing" and "Date Work Done".
@expo/vector-icons: Provides a vast collection of customizable vector icons (e.g., for share icons, etc.).
react-native-url-polyfill: Used to ensure URL parsing works consistently across different environments, particularly important for Linking operations.
StyleSheet (from react-native): Used for defining and managing component styles, promoting reusability and organization.
3.4 Data Storage
@react-native-async-storage/async-storage: A persistent, unencrypted, key-value storage system for React Native. It's used for local data persistence, storing all fire extinguisher records and their associated maintenance logs.
A dedicated StorageService.ts file encapsulates all interactions with AsyncStorage, providing a clean API for saving, retrieving, and updating data.
3.5 Utility Functions
utils/helpers.ts: A dedicated file for common utility functions, such as:
formatDate: Formats Date objects into a readable string format.
generateUUID: Generates unique identifiers for new records (though in this app, sequential barcode numbers are primarily used for new extinguishers).
validateField: A generic validation function for required text fields.
validateDate: A specific validation function for date fields.
4. Navigation Flow
The application's navigation is managed by react-navigation. The App.tsx file sets up the main navigation stack.

RootStack: The primary stack navigator containing all main screens.
HomeScreen:
Purpose: Barcode generation and scanning.
Initial Route: Yes, it's the initialRouteName for the app.
Navigation from: None (it's the starting point).
Navigation to:
StaticInfoScreen (if generating a new barcode or scanning an unknown one).
MaintenanceLogScreen (if scanning an existing barcode).
StaticInfoScreen:
Purpose: Collects initial, static information about a fire extinguisher.
Navigation from: HomeScreen (when a new barcode is generated or scanned).
Navigation to: MaintenanceLogScreen (upon successful submission of static info).
MaintenanceLogScreen:
Purpose: Displays and allows adding dynamic maintenance logs for a specific extinguisher.
Navigation from:
HomeScreen (when scanning an existing barcode).
StaticInfoScreen (after saving static info for a new extinguisher).
Navigation to: None (it's typically the end point for a specific extinguisher's flow, though users can always navigate back).
5. Data Structure (within AsyncStorage)
Data is stored as a collection of fire extinguisher records, each identified by its unique barcode. Each record contains static details and an array of maintenance logs.

type FireExtinguisher = {
  barcode: string;
  extinguisherNo: string;
  location: string;
  dateOfTesting: number; // Stored as a timestamp (milliseconds since epoch)
  maintenanceLogs: MaintenanceLog[];
};

type MaintenanceLog = {
  dateWorkDone: number; // Stored as a timestamp
  remarks: string;
  user: string;
  logId: string; // Unique ID for each log entry
};

// Example data structure in AsyncStorage:
// {
//   "FE-001": {
//     "barcode": "FE-001",
//     "extinguisherNo": "EX-1001",
//     "location": "Main Office",
//     "dateOfTesting": 1678886400000, // Example timestamp for March 15, 2023
//     "maintenanceLogs": [
//       {
//         "logId": "log-abc",
//         "dateWorkDone": 1681564800000, // Example timestamp for April 15, 2023
//         "remarks": "Annual inspection, all good.",
//         "user": "John Doe"
//       },
//       {
//         "logId": "log-def",
//         "dateWorkDone": 1684243200000, // Example timestamp for May 15, 2023
//         "remarks": "Replaced pressure gauge.",
//         "user": "Jane Smith"
//       }
//     ]
//   },
//   "FE-002": { /* ... other extinguisher data ... */ }
// }
6. Development Environment
Operating System: Cross-platform (iOS, Android, Web) via Expo.
Language: TypeScript
IDE: Any compatible with React Native/Expo development (e.g., VS Code).
This detailed documentation should provide a clear understanding of the application's structure, functionalities, and technical implementation, making it easier for future maintenance and enhancements.